@page
@model AboutModel
@{
    ViewData["Title"] = "About SignalR ProgressBar Demo";
}
<div class="container">
    <div class="row" style="padding-top: 50px">
        <div class="col-lg-8 col-md-10 col-sm-12">
            <div class="clearfix"></div>
            <h2>@ViewData["Title"]</h2>
            <p>
                <img class="img-responsive" src="~/images/signals.jpg" alt="">
            </p>
            <p>
                An ASP.NET Core2 app that uses SignalR to send progress messages from server-side code to an HTML page.
                Source code in github: <a href="https://github.com/endintiers/SignalR-AspNetCore-ProgressDemo">SignalR-AspNetCore-ProgressDemo</a>
                you can register feedback/comments there.
            </p>
            <p>
                SignalR frees us from the request-response model so we can imagine other ways to interact between web pages,
                server-side code, services or other clients.
            </p>
            <p>
                The app shows two patterns for server->browser async calling/reporting from long-running tasks
                using SignalR core. The Home page is a simplified example using SignalR with an Ajax POST
                and the NoPost page shows a more worked-up example - a little more complex and 'real'
                with multiple message types (and no POSTs :-)).
            </p>
            <p>
                In the repository there are walk-throughs of the
                <a href="https://github.com/endintiers/SignalR-AspNetCore-ProgressDemo/blob/master/AsyncPOST.md">Async POST pattern</a>
                (simplified: best place to start) and the
                <a href="https://github.com/endintiers/SignalR-AspNetCore-ProgressDemo/blob/master/NoPOST.md">No POST pattern</a>
                which is more complex (and fun?).
            </p>
        </div>
    </div>
</div>
